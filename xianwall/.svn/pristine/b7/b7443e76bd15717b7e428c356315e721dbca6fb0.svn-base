package com.wanding.controller;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.wanding.config.ImageProperties;
import com.wanding.model.UserInfo;
import com.wanding.model.UserInfoCheck;
import com.wanding.util.JsonResponse;

@Controller
@RequestMapping("/images")
public class ImageController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ImageController.class);
	@Autowired
	private ImageProperties imageProperties;

	/**
	 * @Title: imageUpload @Description: 图片上传 @param:userId 用户id,
	 *         photoType:图片类型（cardFront:身份证正面，cardBack:身份证背面，workCard:工作证明照，stuCard:学生证照） @throws
	 */
	@RequestMapping(value = "/imageUpload", method = RequestMethod.POST)
	@ResponseBody
	public Object photoUpload(HttpServletRequest request, @RequestParam MultipartFile myfile) {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			UserInfo userInfo = (UserInfo) request.getSession().getAttribute("user");
			if (verifFile(myfile, result)) {
				String imageuploadpath = imageProperties.getImageuploadpath();
				if (!new File(imageuploadpath).exists()) {
					new File(imageuploadpath).mkdirs();
				}
				String fileType = myfile.getContentType();
				String imageType = fileType.substring(fileType.indexOf("/") + 1);
				String newImageName = userInfo.getId() + "_" + String.valueOf(System.currentTimeMillis()) + "."
						+ imageType;
				String path = imageuploadpath + System.getProperty("file.separator") + newImageName;
				if (!new File(path).exists()) {
					new File(path).getParentFile().mkdirs();
					new File(path).createNewFile();
				}
				myfile.transferTo(new File(path));
				JSONObject data = new JSONObject();
				data.put("imageName", newImageName);
				data.put("filePath", imageProperties.getImagereadpath() + newImageName);
				return JsonResponse.success("文件上传成功", data);
			} else {
				return result;
			}
		} catch (Exception ex) {
			LOGGER.error(">>>>>>图片上传异常，e={}", ex.getMessage());
			return JsonResponse.failure("文件上传失败");
		}
	}

	protected void handleDoc(String photoType, String newImageName, UserInfoCheck userInfoCheck) {
		if ("cardFront".equals(photoType)) {
			userInfoCheck.setIdcardfrontdoc(newImageName);
		} else if ("cardBack".equals(photoType)) {
			userInfoCheck.setIdcardbackdoc(newImageName);
		} else if ("workCard".equals(photoType)) {
			userInfoCheck.setAttachdoc(newImageName);
			userInfoCheck.setAttachtype(photoType);
		} else if ("stuCard".equals(photoType)) {
			userInfoCheck.setIdcardfrontdoc(newImageName);
			userInfoCheck.setAttachtype(photoType);
		}
	}

	private boolean verifFile(MultipartFile myfile, Map<String, Object> result) {
		String[] IMAGE_TYPE = imageProperties.getImageType().split(",");
		if (myfile.isEmpty()) {
			// result.put( "success", false);
			// result.put( "message", "上传文件不能为空");
			result = JsonResponse.failure("上传文件不能为空");
			return false;
		}
		boolean flag = false;
		for (String type : IMAGE_TYPE) {
			if (StringUtils.endsWithIgnoreCase(myfile.getOriginalFilename(), type)) {
				flag = true;
				break;
			}
		}
		if (!flag) {
			// result.put( "success", false);
			// result.put("message", "图片格式不正确,支持png|jpg|jpeg");
			result = JsonResponse.failure("图片格式不正确,支持png|jpg|jpeg");
			return false;
		}
		if (myfile.getSize() > imageProperties.getImageSize()) {
			// result.put( "success", false);
			// result.put("message", "图片大小不能超过4M");
			result = JsonResponse.failure("图片大小不能超过4M");
			return false;

		}
		return true;
	}

	@RequestMapping(value = "/readImage", method = RequestMethod.GET)
	public void show(String fileName, HttpServletRequest request, HttpServletResponse response) {
		String imageuploadpath = imageProperties.getImageuploadpath();
		File file = new File(imageuploadpath + System.getProperty("file.separator") + fileName);
		if (file.exists() && !"".equals(fileName)) {
			try {
				DataOutputStream dos = new DataOutputStream(response.getOutputStream());
				DataInputStream dis = new DataInputStream(new FileInputStream(file.getAbsolutePath()));
				byte[] data = new byte[2048];
				while ((dis.read(data)) != -1) {
					dos.write(data);
					dos.flush();
				}
				dis.close();
				dos.close();
			} catch (IOException e) {
				e.printStackTrace();
				LOGGER.error(">>>>>>图片读取异常，e={}", e.getMessage());
			}
		}
	}
}
