package com.wanding.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

import org.apache.http.HttpEntity;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.StandardHttpRequestRetryHandler;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSONObject;
import com.wanding.comm.Constant;

public class HttpPostUtil {
	private static final Logger LOGGER = LoggerFactory.getLogger(HttpPostUtil.class);

	// 传输超时时间，默认10秒
	private int socketTimeout = 100000;

	// 连接超时时间，默认300秒
	private int connectTimeout = 300000;

	// 从池中拿连接的等待时间，默认2秒
	private int connectReqTimeout = 2000;

	private CloseableHttpClient httpClient;

	public HttpPostUtil() {
		initHttpClient();
	}

	private void initHttpClient() {
		final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
		connectionManager.setMaxTotal(100);
		RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(connectTimeout)
				.setConnectionRequestTimeout(connectReqTimeout).setSocketTimeout(socketTimeout).build();
		HttpRequestRetryHandler retryHandler = new StandardHttpRequestRetryHandler();

		httpClient = HttpClients.custom().setConnectionManager(connectionManager).setDefaultRequestConfig(requestConfig)
				.setRetryHandler(retryHandler).build();

		Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				try {
					connectionManager.closeExpiredConnections();
					connectionManager.closeIdleConnections(300, TimeUnit.SECONDS);
				} catch (Throwable t) {
					t.printStackTrace();
				}
			}
		}, 0, 1000 * 20);
	}

	public String doPostWithJson(String url, Object object, String contentType) throws Exception {
		String json = (String) JSONObject.toJSONString(object);
		LOGGER.info("API，postDataJson：{}", json);
		StringEntity postEntity = new StringEntity(json, "UTF-8");
		HttpPost httpPost = new HttpPost(url);
		httpPost.addHeader("Content-Type", contentType);
		httpPost.setEntity(postEntity);
		String result = httpExecute(httpPost);
		return result;
	}

	private String httpExecute(HttpPost httpPost) throws Exception {
		CloseableHttpResponse response = null;
		String result = null;
		try {
			response = httpClient.execute(httpPost);
			HttpEntity entity = response.getEntity();
			result = EntityUtils.toString(entity, "UTF-8");

		} catch (Exception e) {
			LOGGER.error("http post throw Exception");
			throw e;

		} finally {
			httpPost.abort();
			if (null != response) {
				response.close();
			}
		}
		return result;
	}
	
	
//	public static String sendPost(String requestUrl,String outputStr){
//		return httpRequest(requestUrl, "POST", outputStr);
//	}
//
//	public static String sendGet(String requestUrl,String outputStr){
//		return httpRequest(requestUrl, "GET", outputStr);
//	}

	
	public static String sendGet(String requestUrl) {
        StringBuffer openJsonStr = new StringBuffer();
        InputStream inputStream = null;
        BufferedReader in = null;
        try {
        	URL url = new URL(requestUrl);
    		HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            inputStream = httpURLConnection.getInputStream();
            in = new BufferedReader(new InputStreamReader(inputStream, Constant.DEFAULT_CHARSET));
            String lines = "";
            while ((lines = in.readLine()) != null) {
                openJsonStr.append(lines);
            }
        } catch (IOException e) {
        	LOGGER.error(e.getMessage());
        } finally {


            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return openJsonStr.toString();
    }
	  public static String getStringByInputStream(InputStream inputStream) {
	        StringBuffer sb = new StringBuffer();
	        String s;
	        BufferedReader in = null;
	        try {
	            in = new BufferedReader(new InputStreamReader(inputStream, Constant.DEFAULT_CHARSET));
	            while ((s = in.readLine()) != null) {
	                sb.append(s);
	            }
	        } catch (UnsupportedEncodingException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        } finally {

	            try {
	                if (in != null)
	                    in.close();
	                if (inputStream != null)
	                    inputStream.close();
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	        }
//			log.info("接受到数据内容："+sb.toString());
	        return sb.toString();
	    }
	
	
	
	
	
}
